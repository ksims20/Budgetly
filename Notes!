REACT NATIVE
To start the app: 
npx expo start for the frontend, you can just be in the Budgetly main folder, Press A to start the android app.
<!-- npx nodemon backend/api.js for the backend -->
mvnd spring-boot:run for the backend (Had to comment out the applicationtest.java it was causing issues when running it) Make sure you're in the SpringBoot foldera

or for the future, build JAR file (Already did): mvnd clean package -DskipTests
and then run it: java -jar target/SpringBoot-0.0.1-SNAPSHOT.jar


GITHUB
Git add .
Git commit -m “message”
Git push -u origin main

MYSQL
To check if MySql is running: mysql -u root -p

DB NAME:budgetly_db
DB USERNAME: root
DB PASSWORD: k7774363

http://192.168.1.156:8080/api/expenses

<!-- NODE.JS
Req.body – Gets data from the front end, whatever the user enters from the front end
Res.json(data) – Sends data back to the Front end
Await – Used as async operation (it takes time to get data from the database) -->

<!-- PRISMA
Initialize: npx prisma init

1.	Change the database provider
2.	Update your .env file
3.	Define your first table
Migrate: prisma migrate dev –name init  (creates the migration folder)
Generate Client: npx prisma generate -->


<!-- After making changes to the file, apply changes using.

npx prisma migrate dev --name add-transaction-type -->


SWAPPED TO SPRINGBOOT FOR THE BACKEND:

Backend rewritten in Java with Spring Boot (v3.5.0) using Maven Daemon (mvnd).

https://start.spring.io/ :

Project: Mavern
Language: Java
Spring Boot: 3.5.0

Project Metadata:

Group: com.budgetly
Artifact: backend
Name: backend
Package: com.budgetly.backend





MAVEN: 

Maven Daemon was installed to Environmental Variables instead of Maven, used mvnd instead of mvd.
Run it in the SpringBoot folder: mvnd spring-boot:run


POSTMAN: 

Used for testing HTTP request
http://localhost:8080/api/expenses



EXPRESS
Makes sure that when data is sent back (in the form of JSON) that Express can read it
app.use(express.json());

EXTRAS
What does your app do?
Your app is a budget tracker, so it needs to store data related to:
•	Income (money coming in)
•	Expenses (money going out)
What kind of information do you need to track?
For each transaction, you’d probably want to know:
•	What the transaction is (e.g., rent, groceries, salary)
•	How much money is involved
•	When the transaction happened
•	Whether it’s income or an expense
•	What category it falls under (food, bills, savings, etc.)
What would this look like in a database?
•	Each transaction needs a unique ID
•	A description of the transaction
•	An amount (money involved)
•	A date when it happened
•	A type (expense or income)

Main Color of app: #5e17eb or #9966CC


EMULATOR:

-Since I didnt run this on an mac machine, I used an android emulator, I could have just used Expo on my Iphone but it was easier this way
-I installed Android Stdudio
-Created a virtual device
-Choose a system image
-From there I could do npm run android (just like you can do npm run ios on Mac)
-Then npx expo start --android



CSS STYLING

- View is like <div>
- Text is like <p>
- Button has properties such as title, and onPress
- TextInput allows the user to type : Has a style, a placeholder, a value, onChangeText, and then you can use secureTextEntry to hide text
- TouchableOpacity, wrapper that make it respod to touch gesture
- StyleSheet defines styles like CSS
- Each page has it's on styling sheet, if you want to use the same styling you can create a new file
- Ex: styles.js, and then in those files import sharedStyles from './styles'; .... <TextInput style={sharedStyles.blahblahblah}>


STATE MANAGEMENT
-useState keeps track of values that can change over time

ANIMATABLE (Ended up not using)
-npx expo install react-native-animatable
-https://github.com/oblador/react-native-animatable

LINEARGRADIENT
-Installed using npx expo install expo-linear-gradient
-When using <LinearGraident> tags you dont need <View>

FONTAWESOME
-Already embedded in Expo no install needed
-If you what to put an icon in a textbox youll have to wrap it in a <view>, otherwise just create it inside <view> or <LinearGradient>







2) Azure & Terraform Setup
Once your backend is working locally and you’re confident in the API, start setting up Azure to host your backend and database. Terraform will help you automate that infrastructure.

3) Connect Frontend to Deployed Backend
After deployment, update your frontend fetch URLs to point to your Azure-hosted backend instead of your local IP.

4) Dashboard UI & Styling
Finally, once the data is flowing from the cloud backend, you can polish your Dashboard UI with React Native styles, charts, and whatever else you want.




